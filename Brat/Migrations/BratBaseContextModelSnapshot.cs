// <auto-generated />
using System;
using Brat.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Brat.Migrations
{
    [DbContext(typeof(BratBaseContext))]
    partial class BratBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Brat.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<int>("UserId1")
                        .HasColumnType("int")
                        .HasColumnName("user_id1");

                    b.Property<int>("UserId2")
                        .HasColumnType("int")
                        .HasColumnName("user_id2");

                    b.HasKey("ChatId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId1" }, "user_id1");

                    b.HasIndex(new[] { "UserId2" }, "user_id2");

                    b.ToTable("chat", (string)null);
                });

            modelBuilder.Entity("Brat.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("CaptionPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    b.Property<int>("FromUserId")
                        .HasColumnType("int")
                        .HasColumnName("from_user_id");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_text");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SentTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("MessageId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChatId" }, "chat_id");

                    b.HasIndex(new[] { "FromUserId" }, "from_user_id");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("message", (string)null);
                });

            modelBuilder.Entity("Brat.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutSelf")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("second_name");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "username")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Brat.Models.Chat", b =>
                {
                    b.HasOne("Brat.Models.User", "UserId1Navigation")
                        .WithMany("ChatUserId1Navigations")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_ibfk_1");

                    b.HasOne("Brat.Models.User", "UserId2Navigation")
                        .WithMany("ChatUserId2Navigations")
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_ibfk_2");

                    b.Navigation("UserId1Navigation");

                    b.Navigation("UserId2Navigation");
                });

            modelBuilder.Entity("Brat.Models.Message", b =>
                {
                    b.HasOne("Brat.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_ibfk_1");

                    b.HasOne("Brat.Models.User", "FromUser")
                        .WithMany("MessageFromUsers")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_ibfk_2");

                    b.HasOne("Brat.Models.User", "User")
                        .WithMany("MessageUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_ibfk_3");

                    b.Navigation("Chat");

                    b.Navigation("FromUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Brat.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Brat.Models.User", b =>
                {
                    b.Navigation("ChatUserId1Navigations");

                    b.Navigation("ChatUserId2Navigations");

                    b.Navigation("MessageFromUsers");

                    b.Navigation("MessageUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
